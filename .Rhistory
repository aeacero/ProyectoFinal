"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
vivo
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
DF_vectors=data.frame(nombre,instrumento,edad,vivo)
DF_vectors
artistas
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
heads(artistas,3)
head(artistas,3)
artistas[8,3]= 42
artistas
artistas
artistas
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
artistas[9,3]= 42
artistas
artistas[artistas$instrumento=="banjo"]
artistas[artistas$instrumento=="Bajo"]
artistas[artistas$instrumento=="Bajo",]
artistas[artistas$edad > 60 & artistas$vivo == TRUE]
artistas[artistas$edad > 60 & artistas$vivo == TRUE,2]
unique(artistas[artistas$edad > 60 & artistas$vivo == TRUE,2])
artistas_ordenada= artistas[order(artistas$edad),]
artistas_ordenada
bandas
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre,banda,grammy)
bandas
artistas_total= merge(bandas, artistas)
artistas_total= merge(bandas, artistas)
artistas_total
artistas_total= merge(bandas, artistas, all = FALSE)
artistas_total
artistas_total= merge(bandas, artistas, all.x = TRUE, all.y = TRUE)
artistas_total
nrow(artistas_total)
artistas_total[which.max(artistas_total$edad),2]
artistas_total[which.max(artistas_total$edad),2]
artistas_total[which.max(artistas_total$edad),]
artistas_total[which.max(artistas_total$edad),2]
for (artista in artistas_total){
if (artistas_total[which.max(artistas_total$edad),2] = NA){
if (artistas_total[which.max(artistas_total$edad),2] = NA){
for (artista in artistas_total){
if (artistas_total[which.max(artistas_total$edad),2] == NA){
next}
}
artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
artistas
head(artistas,3)
artistas
for (artista in artistas_total){
if (artistas_total[which.max(artistas_total$edad),2].isNA){
for (artista in artistas_total){
if (artistas_total[which.max(artistas_total$edad),2].isna(artista)){
head(artistas)
head(artistas,1)
artistas_total[order(artistas_total$grammy),]
artistas_total[order(-artistas_total$grammy),]
artistas_total[which.max(artistas_total$edad),2]
artistas_total[artistas_total$grammy<5]
artistas_total[artistas_total$grammy<5,]
artistas_total[artistas_total$grammy<5,1]
unique(artistas_total[artistas_total$grammy<5,1])
artistas_total[artistas_total$banda=='The Beatles'& which.max(artistas_total$edad),4]
artistas_total[which.max(artistas_total$edad & artistas_total$banda=='The Beatles'),4]
setwd("C:/Users/ae.acero539/Dropbox/CursoPeru/Tutorialsimple")
# que variables y tipo
str(colb)
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
setwd("C:/Users/ae.acero539/Dropbox/CursoPeru/ProyectoFinal")
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
setwd("C:/Users/ae.acero539/Dropbox/CursoPeru/ProyectoFinal")
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
summary(colb)
hist(colb$IDH)
hist(colb$Población.Cabecera)
hist(colb$Población.Resto)
colb$cabeLog=log(colb$Población.Cabecera)
colb$cabeLog=log(colb$Población.Cabecera)
colb$restoLog=log(colb$Población.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
summary(colb)
hist(colb$IDH)
hist(colb$Población.Cabecera)
hist(colb$Población.Resto)
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
colb=read.csv(filename, stringsAsFactors = FALSE)
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
View(row4)
View(row4)
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
summary(colb)
hist(colb$IDH)
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
## graficos
# el plot de cada uno seria el histograma:
names(colb)[3]="Población.Cabecera"
names(colb)[4]="Población.Resto"
names(colb)[5]="Población.Total"
hist(colb$IDH)
hist(colb$Población.Cabecera)
hist(colb$Población.Resto)
colb$cabeLog=log(colb$Población.Cabecera)
colb$restoLog=log(colb$Población.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
#resultados
summary(LinRegA)
summary(LinRegB)
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# lo tenemos:
plot(mapCol)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
# grafico mapa basico
plot(mapCol,col='grey',border=0)
# grafico mapa cluster
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
hist(colb$Población.Cabecera)
hist(colb$Población.Resto)
hist(colb$IDH)
IDH=hist(colb$IDH)
IDH
IDH
IDHTableRelPlot=barplot(caso,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
IDH=hist(colb$IDH)
caso=c(IDH$density,IDH$counts)
caso
caso
caso=table(IDH$density,IDH$counts)
caso
IDH=hist(colb$IDH)
caso=table(IDH$counts)
names(caso)= IDH$density
IDH
names(caso)= IDH$density
IDH=hist(colb$IDH)
caso=table(IDH$density)
names(caso)= IDH$density
IDHTableRelPlot=barplot(caso,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
IDH=hist(colb$IDH)
caso=table(IDH$density,IDH$counts)
title='Índice de desarrollo humano'
paleta='red'
IDHTableRelPlot=barplot(caso,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
IDH
IDH=hist(colb$IDH)
caso=table(IDH$counts)
names(caso)=(IDH$density)
title='Índice de desarrollo humano'
paleta='red'
IDHTableRelPlot=barplot(caso,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
IDH=hist(colb$IDH)
caso=table(IDH$density)
names(caso)=(IDH$counts)
title='Índice de desarrollo humano'
paleta='red'
IDHTableRelPlot=barplot(caso,main=title,
col=paleta,ylim = c(0,1),
ylab = "%")
IDH=hist(colb$IDH)
caso=table(IDH$density)
names(caso)=(IDH$counts)
title='Índice de desarrollo humano'
paleta='red'
IDHTableRelPlot=barplot(caso,main=title,
col=paleta,ylim = c(0,20),
ylab = "%")
caso
IDH=hist(colb$IDH)
caso=table(,IDH$density)
caso=table(IDH$density)
names(caso)=(IDH$counts)
caso
IDH$density
IDH=hist(colb$IDH)
caso=table(IDH$density)
caso
IDH=hist(colb$IDH)
caso=table(IDH$counts,IDH$density)
caso
IDH$density
IDH=hist(colb$IDH)
IDH
caso=table(IDH$counts,IDH$mids)
caso
IDH=hist(colb$IDH)
IDHTable=table(colb$IDH)
IDHTable
title='Índice de desarrollo humano'
paleta='red'
IDHTableRelPlot=barplot(IDHTable,main=title,
col=paleta,ylim = c(0,20),
ylab = "%")
IDHTableRelPlot=barplot(IDHTable,main=title,
col=paleta,ylim = c(0,1),
ylab = "%")
IDH=hist(colb$IDH)
IDHTable=table(IDH$mids)
IDHTable
title='Índice de desarrollo humano'
paleta='red'
IDHTableRelPlot=barplot(IDHTable,main=title,
col=paleta,ylim = c(0,1),
ylab = "%")
table[,1]=IDH$counts
table[1,]=IDH$counts
table=IDH$counts
IDHTable
IDHtable[1,]=IDH$counts
IDH=hist(colb$IDH)
IDHTable=table(IDH$mids)
IDHtable[1,]=IDH$counts
IDHTable[1,]=IDH$counts
IDHTable[,-1]=IDH$counts
IDHTable=IDH$counts
IDHTable
IDHTable=IDH$mids
names(IDHTable)=IDH$counts
IDHTable
names(IDHTable)=IDH$mids
IDH=hist(colb$IDH)
IDHTable=IDH$counts
names(IDHTable)=IDH$mids
IDHTable
title='Índice de desarrollo humano'
paleta='red'
IDHTableRelPlot=barplot(IDHTable,main=title,
col=paleta,ylim = c(0,1),
ylab = "%")
IDHTableRelPlot=barplot(IDHTable,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
IDHTableRelPlot=barplot(IDHTable,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
hist(colb$Población.Cabecera)
CAB
CAB=hist(colb$Población.Cabecera)
RES=hist(colb$Población.Resto)
CAB
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
plot(colb[,explanans])
#Carga de datos
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
names(colb)[3]="Población.Cabecera"
names(colb)[4]="Población.Resto"
names(colb)[5]="Población.Total"
IDH=hist(colb$IDH)
CAB=hist(colb$Población.Cabecera)
RES=hist(colb$Población.Resto)
colb$cabeLog=log(colb$Población.Cabecera)
colb$restoLog=log(colb$Población.Resto)
NOR1=hist(colb$cabeLog)
NOR2=hist(colb$restoLog)
plot(IDH, type="h",col="blue",ylim = c(0,20),
ylab = "Frecuencias", xlab="IDH", main="Índice de desarrollo humano")
plot(colb[,explanans], type="p", color="Blue", main="Correlaciones")
plot(colb[,explanans], type="p", color="Blue",ylab = "Cabeceras", xlab="Fuera cabeceras", main="Correlaciones")
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
library(cluster)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
clusters=as.data.frame(resultado$cluster)
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
library
library
library
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
install.packages("rgdal")
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
library(cluster)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=scale(dataCluster[,-1])
clusters=as.data.frame(resultado$cluster)
resultado=kmeans(dataCluster[,-1],3)
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
library(cluster)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
clusters=as.data.frame(resultado$cluster)
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
numberOfClasses = length(unique(varToPLot))
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
library(cluster)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
clusters=as.data.frame(resultado$cluster)
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
